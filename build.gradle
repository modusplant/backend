plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jooq.jooq-codegen-gradle' version '3.20.8'
	id 'jacoco'
}

group = 'modusplant'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	implementation 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.security:spring-security-crypto:6.4.4'
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	implementation 'com.github.f4b6a3:ulid-creator:5.2.3'
	implementation 'com.mailjet:mailjet-client:5.2.5'
	implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.9.10'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	implementation 'org.apache.commons:commons-lang3:3.18.0'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	implementation 'software.amazon.awssdk:s3:2.31.61'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.github.hakky54:logcaptor:2.11.0'
	jooqCodegen 'org.postgresql:postgresql:42.7.2'
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', 'src/main/generated']
		}
	}
}

jacoco {
	toolVersion = "0.8.12"
}

jooq {
	version = dependencyManagement.importedProperties['jooq.version']
	configuration {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = jdbcUrl
			user = jdbcUser
			password = jdbcPassword
		}
		generator {
			database {
				name = 'org.jooq.meta.postgres.PostgresDatabase'
				inputSchema = 'public'
				includes = '.*'
				excludes = 'databasechangelog|databasechangeloglock|flyway_schema_history'
			}
			target {
				packageName = 'kr.modusplant.jooq'
				directory = 'src/main/generated'
				encoding = 'UTF-8'
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
	options.compilerArgs += ["-parameters",
							 "-Amapstruct.defaultComponentModel=spring",
							 "-Amapstruct.unmappedTargetPolicy=ERROR"
	]
}

tasks.named('jacocoTestReport') {
	reports {
		html.required = true
		xml.required = false
	}
}

tasks.named('jooqCodegen') {
	dependsOn tasks.named('flywayMigrate')
}

tasks.named('test') {
	testClassesDirs = sourceSets.test.output.classesDirs
	classpath = sourceSets.test.runtimeClasspath

	useJUnitPlatform()

	finalizedBy tasks.named('jacocoTestReport')
}

afterEvaluate {
	tasks.named('jacocoTestReport') {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/generated/**',     // Exclude generated classes
					'**/*_*',              // Exclude MapStruct-generated classes
					'**/*Builder.*',       // Exclude builders
			])
		}))
	}
}

tasks.register('testCoverage', Test) {
	group = 'verification'
	description = 'Runs the unit tests with coverage'
	testClassesDirs = sourceSets.test.output.classesDirs
	classpath = sourceSets.test.runtimeClasspath

	dependsOn(':test', ':jacocoTestReport')

	tasks.named('jacocoTestReport').get().mustRunAfter(tasks.named('test'))
}